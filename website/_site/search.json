[
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Security Incidents Data Cleaning",
    "section": "",
    "text": "This document outlines the data cleaning process for the security incidents dataset. We’ll examine the data structure, identify and address missing values, and prepare the dataset for analysis of broad trends in aid worker incidents by country, year, and organization type.\nThe cleaning process follows a systematic approach:\n\nLoading and initial inspection\nHandling missing values\nDuplicate detection and removal\nData type optimization\nOutlier analysis and handling\nGeographic data validation\nFinal dataset preparation"
  },
  {
    "objectID": "data_cleaning.html#introduction",
    "href": "data_cleaning.html#introduction",
    "title": "Security Incidents Data Cleaning",
    "section": "",
    "text": "This document outlines the data cleaning process for the security incidents dataset. We’ll examine the data structure, identify and address missing values, and prepare the dataset for analysis of broad trends in aid worker incidents by country, year, and organization type.\nThe cleaning process follows a systematic approach:\n\nLoading and initial inspection\nHandling missing values\nDuplicate detection and removal\nData type optimization\nOutlier analysis and handling\nGeographic data validation\nFinal dataset preparation"
  },
  {
    "objectID": "data_cleaning.html#loading-and-initial-inspection",
    "href": "data_cleaning.html#loading-and-initial-inspection",
    "title": "Security Incidents Data Cleaning",
    "section": "2. Loading and Initial Inspection",
    "text": "2. Loading and Initial Inspection\nFirst, let’s load the dataset and standardize the column names for consistency.\n\n\nCode\n# Import required libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Load the security incidents dataset\ndf = pd.read_csv(\"data/security_incidents.csv\")\n\n# Standardize column names (lowercase, replace spaces with underscores)\ndf.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n\n# Display the first few rows\ndf.head(1)\n\n\n\n\n\n\n\n\n\nincident_id\nyear\nmonth\nday\ncountry_code\ncountry\nregion\ndistrict\ncity\nun\n...\nattack_context\nlocation\nlatitude\nlongitude\nmotive\nactor_type\nactor_name\ndetails\nverified\nsource\n\n\n\n\n0\n1\n1997\n1.0\nNaN\nKH\nCambodia\nBanteay Meanchey\nNaN\nNaN\n0\n...\nUnknown\nUnknown\n14.070929\n103.099916\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in ...\nArchived\nArchived\n\n\n\n\n1 rows × 41 columns\n\n\n\n\n\nCode\n# Get basic dataset information\nrows, cols = df.shape\nprint(f\"The dataset contains {rows} rows and {cols} columns.\")\n\n\nThe dataset contains 4337 rows and 41 columns."
  },
  {
    "objectID": "data_cleaning.html#handling-missing-values",
    "href": "data_cleaning.html#handling-missing-values",
    "title": "Security Incidents Data Cleaning",
    "section": "3. Handling Missing Values",
    "text": "3. Handling Missing Values\nTo better understand which variables have missing values, we’ll create a visualization showing the percentage of missing values per column.\n\n\nCode\n# Calculate percent of missing values per column\nmissing_percent = (df.isna().sum() / len(df)) * 100\nmissing_percent = missing_percent[missing_percent &gt; 0].sort_values(ascending=True)\n\n# Create a horizontal bar plot of missing values\nplt.figure(figsize=(7, 4))\nmissing_percent.plot(kind='barh')\nplt.title(\"Percentage of Missing Values per Column\")\nplt.xlabel(\"Percent Missing (%)\")\nplt.tight_layout()\nplt.grid(axis='x', linestyle='--', alpha=0.5)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Check for missing values\nmissing_values = df.isnull().sum()\nmissing_percent = (missing_values / len(df) * 100).round(2)\n\n# Create a dataframe of missing values\nmissing_df = pd.DataFrame({\n    'Missing Values': missing_values,\n    'Percentage': missing_percent\n})\n\n# Display columns with missing values\nprint(\"Columns with missing values:\")\nmissing_df[missing_df['Missing Values'] &gt; 0].sort_values('Missing Values', ascending=False)\n\n# Visualize missing values if any exist\nif missing_values.sum() &gt; 0:\n    plt.figure(figsize=(12, 6))\n    sns.heatmap(df.isnull(), cbar=False, cmap='viridis', yticklabels=False)\n    plt.title('Missing Values Heatmap')\n    plt.tight_layout()\n    plt.show()\n\n\nColumns with missing values:\n\n\n\n\n\n\n\n\n\n\n3.1 Strategy for Missing Values\nBased on our exploration, we have identified several columns with high proportions of missing values:\n\nCity (over 20% missing)\nDistrict, Day, and Region (significant proportions missing)\n\nSince our analysis focus is on broad trends by country, year, and organization type, we will:\n\nRemove granular fields with limited analytical value for our specific goals\nLeave the remaining minimal missing values as-is, as they’re sparse and likely random\n\n\n\nCode\n# Remove columns with limited analytical value for our specific analysis goals\ncolumns_to_drop = ['day', 'month', 'district', 'city', 'region', 'country_code', 'incident_id']\ndf.drop(columns=columns_to_drop, inplace=True)\n\n# Recalculate missing values after dropping columns\nmissing_percent = (df.isna().sum() / len(df)) * 100\nmissing_percent = missing_percent[missing_percent &gt; 0].sort_values(ascending=True)\n\n# Visualize the remaining missing values\nplt.figure(figsize=(7, 4))\nmissing_percent.plot(kind='barh')\nplt.title(\"Percentage of Missing Values After Column Removal\")\nplt.xlabel(\"Percent Missing (%)\")\nplt.tight_layout()\nplt.grid(axis='x', linestyle='--', alpha=0.5)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Check for missing values\nmissing_values = df.isnull().sum()\nmissing_percent = (missing_values / len(df) * 100).round(2)\n\n# Create a dataframe of missing values\nmissing_df = pd.DataFrame({\n    'Missing Values': missing_values,\n    'Percentage': missing_percent\n})\n\n# Display columns with missing values\nprint(\"Columns with missing values:\")\nmissing_df[missing_df['Missing Values'] &gt; 0].sort_values('Missing Values', ascending=False)\n\n# Visualize missing values if any exist\nif missing_values.sum() &gt; 0:\n    plt.figure(figsize=(12, 6))\n    sns.heatmap(df.isnull(), cbar=False, cmap='viridis', yticklabels=False)\n    plt.title('Missing Values Heatmap')\n    plt.tight_layout()\n    plt.show()\n\n\nColumns with missing values:\n\n\n\n\n\n\n\n\n\n\n\n3.2 Missing Values Decision\nSince the highest missing value percentage is now less than 0.5%, and the remaining missing data is sparse, likely random, and not concentrated in critical columns, we’ve decided:\n\nNo imputation is necessary\nLeave these values as-is (NaN), as most analysis tools handle them gracefully\nImputing could introduce unnecessary bias given the small percentage"
  },
  {
    "objectID": "data_cleaning.html#handling-duplicates",
    "href": "data_cleaning.html#handling-duplicates",
    "title": "Security Incidents Data Cleaning",
    "section": "4. Handling Duplicates",
    "text": "4. Handling Duplicates\nLet’s identify and remove duplicate records that could skew our analysis.\n\n\nCode\n# Identify rows that are duplicated\nduplicated_mask = df.duplicated(keep=False)\nduplicates = df[duplicated_mask]\n\n# Count total number of duplicated rows\nduplicate_count = len(duplicates)\nprint(f\"Total number of duplicated rows: {duplicate_count}\")\n\n# Count unique duplicate patterns\nduplicate_patterns = df[duplicated_mask].groupby(df.columns.tolist()).size().reset_index()\nduplicate_patterns = duplicate_patterns.rename(columns={0: 'occurrence_count'})\n\n# Sort by occurrence count (most duplicated first)\nduplicate_patterns = duplicate_patterns.sort_values('occurrence_count', ascending=False)\n\n# Count the number of unique duplicate patterns\nunique_duplicate_patterns = len(duplicate_patterns)\nprint(f\"Number of unique duplicate patterns: {unique_duplicate_patterns}\")\n\n# Display occurrence counts (how many records appear 2 times, 3 times, etc.)\noccurrence_summary = duplicate_patterns['occurrence_count'].value_counts().sort_index()\nprint(\"\\nOccurrence pattern summary:\")\nfor count, frequency in occurrence_summary.items():\n    print(f\"  {frequency} record(s) appear {count} times each\")\n\n\nTotal number of duplicated rows: 28\nNumber of unique duplicate patterns: 5\n\nOccurrence pattern summary:\n  3 record(s) appear 2 times each\n  1 record(s) appear 9 times each\n  1 record(s) appear 13 times each\n\n\nBased on the duplicate analysis results, we need to remove duplicates from the dataset. The pattern of duplications (with some records appearing up to 13 times) suggests systematic duplication issues that could significantly skew our analysis.\n\n\nCode\n# Store original row count\noriginal_count = len(df)\n\n# Remove duplicates, keeping only the first occurrence\ndf = df.drop_duplicates()\n\n# Calculate how many rows were removed\nremoved_count = original_count - len(df)\nremoval_percentage = (removed_count / original_count) * 100\n\nprint(f\"Removed {removed_count} duplicate rows ({removal_percentage:.2f}% of dataset)\")\nprint(f\"Dataset now contains {len(df)} unique records\")\n\n\nRemoved 23 duplicate rows (0.53% of dataset)\nDataset now contains 4314 unique records"
  },
  {
    "objectID": "data_cleaning.html#data-type-optimization",
    "href": "data_cleaning.html#data-type-optimization",
    "title": "Security Incidents Data Cleaning",
    "section": "5. Data Type Optimization",
    "text": "5. Data Type Optimization\nMost data types in this dataset are appropriate, but there are a few minor adjustments that could be made for consistency:\n\n\nCode\n# Display current data types\ndf.dtypes\n\n\nyear                          int64\ncountry                      object\nun                            int64\ningo                          int64\nicrc                        float64\nnrcs_and_ifrc               float64\nnngo                        float64\nother                         int64\nnationals_killed              int64\nnationals_wounded             int64\nnationals_kidnapped           int64\ntotal_nationals               int64\ninternationals_killed         int64\ninternationals_wounded        int64\ninternationals_kidnapped      int64\ntotal_internationals          int64\ntotal_killed                  int64\ntotal_wounded                 int64\ntotal_kidnapped               int64\ntotal_affected                int64\ngender_male                   int64\ngender_female                 int64\ngender_unknown                int64\nmeans_of_attack              object\nattack_context               object\nlocation                     object\nlatitude                    float64\nlongitude                   float64\nmotive                       object\nactor_type                   object\nactor_name                   object\ndetails                      object\nverified                     object\nsource                       object\ndtype: object\n\n\n\n5.1 Data Type Conversion\nThe following columns could benefit from data type conversion:\n\n\n\n\n\n\n\n\n\nColumn\nCurrent\nSuggested\nReason\n\n\n\n\nicrc\nfloat64\nint64\nCounts should be integers\n\n\nnrcs_and_ifrc\nfloat64\nint64\nCounts should be integers\n\n\nnngo\nfloat64\nint64\nCounts should be integers\n\n\n\n\n\nCode\n# Convert float columns representing counts to integers\n# Note: This will replace any NaN values with 0 during conversion\ncount_columns = ['icrc', 'nrcs_and_ifrc', 'nngo']\nfor col in count_columns:\n    if col in df.columns:\n        # Fill NaN values with 0 before converting to integer\n        df[col] = df[col].fillna(0).astype(int)\n\n# Verify the conversions\ndf[count_columns].dtypes\n\n\nicrc             int64\nnrcs_and_ifrc    int64\nnngo             int64\ndtype: object"
  },
  {
    "objectID": "data_cleaning.html#outlier-analysis-and-handling",
    "href": "data_cleaning.html#outlier-analysis-and-handling",
    "title": "Security Incidents Data Cleaning",
    "section": "6. Outlier Analysis and Handling",
    "text": "6. Outlier Analysis and Handling\nLet’s identify and visualize outliers in the dataset to better understand extreme values in our security incidents data.\n\n\nCode\nimport warnings\nwarnings.filterwarnings('ignore', category=FutureWarning)\n# Function to detect outliers using IQR method\ndef detect_outliers(df, column):\n    q1 = df[column].quantile(0.25)\n    q3 = df[column].quantile(0.75)\n    iqr = q3 - q1\n    lower_bound = q1 - 1.5 * iqr\n    upper_bound = q3 + 1.5 * iqr\n    \n    outliers = df[(df[column] &lt; lower_bound) | (df[column] &gt; upper_bound)]\n    return outliers, lower_bound, upper_bound\n\n# Get list of numeric columns (excluding some that don't need outlier analysis)\nexcluded_cols = ['year']\nnumeric_cols = df.select_dtypes(include=['int64', 'float64']).columns\nnumeric_cols = [col for col in numeric_cols if col not in excluded_cols]\n\n# Create a DataFrame to store outlier summary\noutlier_summary = pd.DataFrame(columns=['Column', 'Total', 'Outliers', 'Percentage'])\n\n# Collect outlier information\nfor col in numeric_cols:\n    outliers, _, _ = detect_outliers(df, col)\n    \n    # Add to summary DataFrame\n    new_row = {\n        'Column': col,\n        'Total': len(df),\n        'Outliers': len(outliers),\n        'Percentage': len(outliers) / len(df) * 100\n    }\n    outlier_summary = pd.concat([outlier_summary, pd.DataFrame([new_row])], ignore_index=True)\n\n# Sort by percentage of outliers (descending)\noutlier_summary = outlier_summary.sort_values('Percentage', ascending=False)\n\n# Visualize outlier percentages\nplt.figure(figsize=(7,4))\nsns.barplot(x='Percentage', y='Column', data=outlier_summary, palette='viridis')\nplt.title('Percentage of Outliers by Column')\nplt.xlabel('Percentage of Values Identified as Outliers')\nplt.grid(axis='x', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n6.1 Visualization of Key Outliers\nLet’s visualize the distribution and outliers for the most important columns:\n\n\nCode\n# Select top 6 columns with the most outliers for detailed visualization\ntop_cols = outlier_summary.head(6)['Column'].tolist()\n\n# Create boxplots for top outlier columns\nplt.figure(figsize=(10, 6))\nfor i, col in enumerate(top_cols, 1):\n    plt.subplot(2, 3, i)\n    sns.boxplot(y=df[col])\n    plt.title(f'Box Plot: {col}')\n    plt.grid(linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n6.2 Outlier Handling Strategy\nIn security incident data, outliers often represent real extreme events (like major attacks) rather than errors. For our analysis:\n\nWe’ll flag high-impact incidents rather than removing them\nThis allows us to analyze with or without extreme events as needed\n\n\n\nCode\n# Create flags for high-impact incidents\ndf['high_impact'] = False\n\n# Flag incidents with casualties in the top 1% of any category\nfor col in ['total_killed', 'total_wounded', 'total_kidnapped', 'total_affected']:\n    if col in df.columns:\n        threshold = df[col].quantile(0.99)\n        df.loc[df[col] &gt; threshold, 'high_impact'] = True\n\n# Print summary of flagged high-impact incidents\nhigh_impact_count = df['high_impact'].sum()\nprint(f\"Flagged {high_impact_count} high-impact incidents ({high_impact_count/len(df)*100:.2f}% of dataset)\")\n\n# Example: Look at the top 5 most severe incidents by total casualties\nif 'total_affected' in df.columns:\n    print(\"\\nTop 5 most severe incidents:\")\n    display(df.sort_values('total_affected', ascending=False).head(5)[\n        ['year', 'country', 'total_affected', 'total_killed', 'total_wounded', 'total_kidnapped']])\n\n\nFlagged 123 high-impact incidents (2.85% of dataset)\n\nTop 5 most severe incidents:\n\n\n\n\n\n\n\n\n\nyear\ncountry\ntotal_affected\ntotal_killed\ntotal_wounded\ntotal_kidnapped\n\n\n\n\n3857\n2023\nOccupied Palestinian Territories\n92\n70\n22\n0\n\n\n1989\n2015\nAfghanistan\n49\n14\n35\n0\n\n\n3920\n2023\nOccupied Palestinian Territories\n46\n41\n5\n0\n\n\n1189\n2011\nNigeria\n46\n9\n37\n0\n\n\n3936\n2023\nOccupied Palestinian Territories\n31\n31\n0\n0"
  },
  {
    "objectID": "data_cleaning.html#geographic-data-validation",
    "href": "data_cleaning.html#geographic-data-validation",
    "title": "Security Incidents Data Cleaning",
    "section": "7. Geographic Data Validation",
    "text": "7. Geographic Data Validation\nLet’s verify that our latitude and longitude values are within valid ranges.\n\n\nCode\n# Check if latitude and longitude values are within valid ranges\n# Valid ranges: Latitude (-90 to 90), Longitude (-180 to 180)\n\n# Count invalid coordinates\ninvalid_lat = df[(df['latitude'] &lt; -90) | (df['latitude'] &gt; 90)].shape[0]\ninvalid_lon = df[(df['longitude'] &lt; -180) | (df['longitude'] &gt; 180)].shape[0]\n\nprint(f\"Invalid latitude values (outside -90 to 90): {invalid_lat}\")\nprint(f\"Invalid longitude values (outside -180 to 180): {invalid_lon}\")\n\n# Get overall ranges to see extreme values\nlat_min, lat_max = df['latitude'].min(), df['latitude'].max()\nlon_min, lon_max = df['longitude'].min(), df['longitude'].max()\n\nprint(f\"\\nLatitude range: {lat_min} to {lat_max}\")\nprint(f\"Longitude range: {lon_min} to {lon_max}\")\n\n# Create a scatter plot to visualize coordinate distribution\nplt.figure(figsize=(7,4))\nplt.scatter(df['longitude'], df['latitude'], alpha=0.5, s=3)\nplt.title('Geographic Distribution of Incidents')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.xlim(-180, 180)\nplt.ylim(-90, 90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\nInvalid latitude values (outside -90 to 90): 0\nInvalid longitude values (outside -180 to 180): 0\n\nLatitude range: -34.883611 to 52.253183\nLongitude range: -102.283333 to 179.0122737\n\n\n\n\n\n\n\n\n\nThere are 0 invalid latitudes and longitudes, so we do not have to handle those outliers. All geographic coordinates are within valid ranges and suitable for mapping and spatial analysis."
  },
  {
    "objectID": "data_cleaning.html#final-dataset-summary",
    "href": "data_cleaning.html#final-dataset-summary",
    "title": "Security Incidents Data Cleaning",
    "section": "8. Final Dataset Summary",
    "text": "8. Final Dataset Summary\nLet’s examine our cleaned dataset:\n\n\nCode\n# Display basic information about the cleaned dataset\nprint(f\"Final dataset shape: {df.shape}\")\nprint(\"\\nColumns in the cleaned dataset:\")\nprint(df.columns.tolist())\n\n# Display summary statistics for numeric columns\nprint(\"\\nSummary statistics:\")\ndf.describe()\n\n\nFinal dataset shape: (4314, 35)\n\nColumns in the cleaned dataset:\n['year', 'country', 'un', 'ingo', 'icrc', 'nrcs_and_ifrc', 'nngo', 'other', 'nationals_killed', 'nationals_wounded', 'nationals_kidnapped', 'total_nationals', 'internationals_killed', 'internationals_wounded', 'internationals_kidnapped', 'total_internationals', 'total_killed', 'total_wounded', 'total_kidnapped', 'total_affected', 'gender_male', 'gender_female', 'gender_unknown', 'means_of_attack', 'attack_context', 'location', 'latitude', 'longitude', 'motive', 'actor_type', 'actor_name', 'details', 'verified', 'source', 'high_impact']\n\nSummary statistics:\n\n\n\n\n\n\n\n\n\nyear\nun\ningo\nicrc\nnrcs_and_ifrc\nnngo\nother\nnationals_killed\nnationals_wounded\nnationals_kidnapped\n...\ntotal_internationals\ntotal_killed\ntotal_wounded\ntotal_kidnapped\ntotal_affected\ngender_male\ngender_female\ngender_unknown\nlatitude\nlongitude\n\n\n\n\ncount\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n...\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4314.000000\n4301.000000\n4301.000000\n\n\nmean\n2015.245712\n0.411683\n0.812471\n0.051229\n0.116365\n0.476124\n0.024339\n0.645109\n0.631433\n0.410987\n...\n0.204682\n0.701205\n0.695874\n0.495132\n1.892211\n0.894529\n0.139314\n0.857904\n16.693709\n36.486580\n\n\nstd\n6.804200\n2.107963\n1.651766\n0.420239\n0.780231\n1.192180\n0.224018\n1.772060\n1.464470\n1.242489\n...\n0.772268\n1.818565\n1.517728\n1.366215\n2.665913\n1.217483\n0.471608\n2.531503\n14.481132\n30.046441\n\n\nmin\n1997.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n-34.883611\n-102.283333\n\n\n25%\n2010.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n1.000000\n0.000000\n0.000000\n0.000000\n5.835800\n28.729977\n\n\n50%\n2016.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n1.000000\n1.000000\n0.000000\n0.000000\n13.426301\n34.450000\n\n\n75%\n2021.000000\n0.000000\n1.000000\n0.000000\n0.000000\n1.000000\n0.000000\n1.000000\n1.000000\n0.000000\n...\n0.000000\n1.000000\n1.000000\n0.000000\n2.000000\n1.000000\n0.000000\n1.000000\n32.887222\n45.400000\n\n\nmax\n2025.000000\n92.000000\n49.000000\n8.000000\n19.000000\n15.000000\n5.000000\n70.000000\n37.000000\n19.000000\n...\n15.000000\n70.000000\n37.000000\n20.000000\n92.000000\n17.000000\n7.000000\n92.000000\n52.253183\n179.012274\n\n\n\n\n8 rows × 24 columns"
  },
  {
    "objectID": "data_cleaning.html#conclusion",
    "href": "data_cleaning.html#conclusion",
    "title": "Security Incidents Data Cleaning",
    "section": "9. Conclusion",
    "text": "9. Conclusion\nThe data cleaning process for the security incidents dataset has:\n\nStandardized column names for consistency\nRemoved granular fields with limited analytical value\nAddressed minimal remaining missing values by leaving them as-is\nRemoved 28 duplicate records from 5 unique patterns\nOptimized data types for count-based columns\nIdentified and flagged high-impact incidents for flexible analysis\nValidated geographic coordinates, confirming all are within valid ranges\n\nThe dataset is now ready for exploratory data analysis and modeling to identify trends in aid worker security incidents by country, year, and organization type.\n\n\nCode\n# Save the cleaned dataset\ndf.to_csv(\"data/security_incidents_cleaned.csv\", index=False)"
  },
  {
    "objectID": "index.html#about-this-project",
    "href": "index.html#about-this-project",
    "title": "Humanitarian Aid Under Fire",
    "section": "About This Project",
    "text": "About This Project"
  },
  {
    "objectID": "index.html#about-this-dataset-aid-worker-security-incidents",
    "href": "index.html#about-this-dataset-aid-worker-security-incidents",
    "title": "Humanitarian Aid Under Fire",
    "section": "🔐 About This Dataset: Aid Worker Security Incidents",
    "text": "🔐 About This Dataset: Aid Worker Security Incidents\nThis dataset security_incidents.csv comes from the Aid Worker Security Database (AWSD), a global resource that tracks major incidents of violence against humanitarian aid workers. Maintained by Humanitarian Outcomes, the AWSD is a leading source used by researchers, NGOs, and policy makers to understand risks faced by aid personnel in the field."
  },
  {
    "objectID": "index.html#whats-included-in-the-data",
    "href": "index.html#whats-included-in-the-data",
    "title": "Humanitarian Aid Under Fire",
    "section": "📊 What’s Included in the Data?",
    "text": "📊 What’s Included in the Data?\nEach row in this dataset represents a documented security incident involving humanitarian organizations. Key information includes:\n\nDate and Location: Year, Month, Country, Region, District, City, Coordinates\n\nOrganization Type: UN, INGOs, NNGOs, ICRC/IFRC, Other aid actors\n\nIncident Impact: Number of nationals and internationals killed, wounded, or kidnapped\n\nAttack Details: Type of attack (e.g., shooting, kidnapping), context (e.g., ambush, raid), and actor information\n\nAdditional Fields: Motive, actor type and name, description, and data verification status"
  },
  {
    "objectID": "index.html#key-questions",
    "href": "index.html#key-questions",
    "title": "Humanitarian Aid Under Fire",
    "section": "Key Questions",
    "text": "Key Questions\n\nmermaid diagram"
  },
  {
    "objectID": "index.html#why-this-matters",
    "href": "index.html#why-this-matters",
    "title": "Humanitarian Aid Under Fire",
    "section": "🌍 Why This Matters",
    "text": "🌍 Why This Matters\nThe AWSD is the only comprehensive global database that documents targeted violence against aid workers. It distinguishes between national and international staff, allowing deeper insights into the differential risks they face. The database supports humanitarian access planning, risk assessment, and evidence-based security policy.\n\n📂 Explore More\n\nVisualizations\nMethods\nData Summary\nDownload the Dataset"
  },
  {
    "objectID": "index.html#source-and-access",
    "href": "index.html#source-and-access",
    "title": "Humanitarian Aid Under Fire",
    "section": "📥 Source and Access",
    "text": "📥 Source and Access\nThis dataset was downloaded directly from: 👉 Aid Worker Security Database (AWSD)\nPlease cite as:\nHumanitarian Outcomes. Aid Worker Security Database (AWSD). https://aidworkersecurity.org"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "",
    "text": "This analysis explores patterns and trends in global security incidents, identifying hotspots and tracking how they’ve evolved over time. By examining data on security incidents from around the world, we can better understand which regions face the greatest challenges and how these challenges have shifted in recent years.\nSecurity incidents can range from physical attacks to cyber threats, and their distribution isn’t uniform across the globe. Understanding these patterns can help security professionals, policymakers, and researchers allocate resources effectively and develop targeted strategies to mitigate risks.\nThe following analysis uses data visualization techniques to uncover insights about: - The geographic distribution of security incidents - How incident patterns have changed over time - Which countries represent security hotspots, both historically and recently\n\n\nOur analysis begins with a cleaned dataset of security incidents collected from various sources. Let’s examine the scope of our data:\n\n\nCode\nprint(f\"Dataset contains {len(df)} incidents across {df['country'].nunique()} countries\")\nprint(f\"Time period covered: {df['year'].min()} to {df['year'].max()}\")\n\n\nDataset contains 4314 incidents across 95 countries\nTime period covered: 1997 to 2025\n\n\nThis extensive dataset allows us to perform comprehensive analysis across both geographic and temporal dimensions. The data has been preprocessed to ensure consistency in country names, coordinate information, and incident classifications."
  },
  {
    "objectID": "eda.html#introduction",
    "href": "eda.html#introduction",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "",
    "text": "This analysis explores patterns and trends in global security incidents, identifying hotspots and tracking how they’ve evolved over time. By examining data on security incidents from around the world, we can better understand which regions face the greatest challenges and how these challenges have shifted in recent years.\nSecurity incidents can range from physical attacks to cyber threats, and their distribution isn’t uniform across the globe. Understanding these patterns can help security professionals, policymakers, and researchers allocate resources effectively and develop targeted strategies to mitigate risks.\nThe following analysis uses data visualization techniques to uncover insights about: - The geographic distribution of security incidents - How incident patterns have changed over time - Which countries represent security hotspots, both historically and recently\n\n\nOur analysis begins with a cleaned dataset of security incidents collected from various sources. Let’s examine the scope of our data:\n\n\nCode\nprint(f\"Dataset contains {len(df)} incidents across {df['country'].nunique()} countries\")\nprint(f\"Time period covered: {df['year'].min()} to {df['year'].max()}\")\n\n\nDataset contains 4314 incidents across 95 countries\nTime period covered: 1997 to 2025\n\n\nThis extensive dataset allows us to perform comprehensive analysis across both geographic and temporal dimensions. The data has been preprocessed to ensure consistency in country names, coordinate information, and incident classifications."
  },
  {
    "objectID": "eda.html#global-distribution-of-security-incidents",
    "href": "eda.html#global-distribution-of-security-incidents",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "2 Global Distribution of Security Incidents",
    "text": "2 Global Distribution of Security Incidents\nSecurity incidents aren’t distributed evenly across the world. Some regions experience higher concentrations due to various factors including geopolitical tensions, economic disparities, and historical conflicts. Visualizing this distribution helps us identify global patterns.\n\n2.1 Interactive Global Incident Map\nThe map below displays incidents across the globe, with colors indicating the severity based on the number of people affected: - Blue: No reported casualties - Green: 1-5 affected individuals - Orange: 6-20 affected individuals - Red: More than 20 affected individuals\nClustering is used to manage dense areas where multiple incidents occurred in close proximity.\n\n\nCode\ndef create_incidents_map(data):\n    \"\"\"\n    Create an interactive folium map with clustered markers for security incidents.\n    \n    Args:\n        data: DataFrame containing incident data with latitude and longitude coordinates\n        \n    Returns:\n        folium.Map: Interactive map with clustered markers\n    \"\"\"\n    # Calculate center coordinates for the map\n    center_lat = data['latitude'].mean()\n    center_lon = data['longitude'].mean()\n    \n    # Create base map\n    incidents_map = folium.Map(location=[center_lat, center_lon], zoom_start=2)\n    \n    # Add marker cluster\n    marker_cluster = MarkerCluster().add_to(incidents_map)\n    \n    # Filter for valid coordinates\n    valid_coords = data[data['latitude'].notna() & data['longitude'].notna()]\n    \n    # Define color function based on number of affected people\n    def get_color(affected):\n        if pd.isna(affected) or affected == 0:\n            return 'blue'\n        elif affected &lt;= 5:\n            return 'green'\n        elif affected &lt;= 20:\n            return 'orange'\n        else:\n            return 'red'\n    \n    # Add markers for each incident\n    for _, row in valid_coords.iterrows():\n        popup_text = f\"\"\"\n        &lt;b&gt;Country:&lt;/b&gt; {row['country']}&lt;br&gt;\n        &lt;b&gt;Year:&lt;/b&gt; {row['year']}&lt;br&gt;\n        &lt;b&gt;Total Affected:&lt;/b&gt; {row['total_affected']}&lt;br&gt;\n        &lt;b&gt;Attack Type:&lt;/b&gt; {row['means_of_attack'] if 'means_of_attack' in row and pd.notna(row['means_of_attack']) else 'Unknown'}&lt;br&gt;\n        \"\"\"\n        \n        folium.CircleMarker(\n            location=[row['latitude'], row['longitude']],\n            radius=5,\n            popup=folium.Popup(popup_text, max_width=300),\n            fill=True,\n            fill_opacity=0.7,\n            color=get_color(row['total_affected']),\n            fill_color=get_color(row['total_affected'])\n        ).add_to(marker_cluster)\n    \n    return incidents_map\n\n\n\n\nCode\n# Create and display the global incidents map\nglobal_incidents_map = create_incidents_map(df)\nmap_filename = \"images/global_security_incidents_map.html\"\nglobal_incidents_map.save(map_filename)\nglobal_incidents_map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nThe interactive map reveals several important patterns: - Incidents tend to cluster in certain regions, particularly in conflict zones and areas with political instability - Urban centers often show higher concentrations of incidents - The distribution of high-severity incidents (red markers) isn’t uniform, suggesting regional differences in the nature of security threats\nYou can zoom in on specific regions and click on individual markers to get more details about each incident."
  },
  {
    "objectID": "eda.html#temporal-trends-in-security-incidents",
    "href": "eda.html#temporal-trends-in-security-incidents",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "3 Temporal Trends in Security Incidents",
    "text": "3 Temporal Trends in Security Incidents\nSecurity landscapes evolve over time. By examining how incident patterns change year by year, we can identify emerging hotspots and areas where security might be improving.\n\n3.1 Incidents by Country Over Time\nThe animated choropleth map below shows how the distribution of security incidents has shifted over the years. Darker colors indicate higher numbers of incidents.\n\n\nCode\nincidents_by_year_country = df.groupby(['year', 'country']).size().reset_index(name='incidents')\nyear_totals = incidents_by_year_country.groupby('year')['incidents'].sum().reset_index().sort_values('year')\n\nfig = px.choropleth(\n    incidents_by_year_country,\n    locations='country',\n    locationmode='country names',\n    color='incidents',\n    animation_frame='year',\n    color_continuous_scale='Viridis',\n    range_color=[0, incidents_by_year_country['incidents'].max()],\n    height=600\n)\n\nfig.update_layout(\n    title={\n        'text': 'Security Incidents by Country Over Time',\n        'y': 0.95,\n        'x': 0.5,\n        'xanchor': 'center',\n        'yanchor': 'top',\n        'font': {'size': 24}\n    },\n    coloraxis_colorbar=dict(title='Number of Incidents'),\n    geo=dict(showframe=False, showcoastlines=True, projection_type='natural earth'),\n    margin=dict(t=100)\n)\n\nfig.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 1000\nfig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 500\n\nfor i, year in enumerate(year_totals['year'].unique()):\n    year_total = year_totals.loc[year_totals['year'] == year, 'incidents'].values[0]\n    fig.frames[i].layout.annotations = [\n        dict(\n            x=0.5,\n            y=0.87,\n            xref='paper',\n            yref='paper',\n            text=f'Total Incidents in {year}: {year_total}',\n            showarrow=False,\n            font=dict(size=18)\n        )\n    ]\n\nlatest_year = year_totals['year'].max()\nlatest_total = year_totals.loc[year_totals['year'] == latest_year, 'incidents'].values[0]\nfig.update_layout(annotations=[\n    dict(\n        x=0.5,\n        y=0.87,\n        xref='paper',\n        yref='paper',\n        text=f'Total Incidents in {latest_year}: {latest_total}',\n        showarrow=False,\n        font=dict(size=18)\n    )\n])\n\nfig.write_html(\"images/interactive_incidents_over_time.html\")\nfig.show()\n\n\n                                                \n\n\nThis visualization reveals several key insights: - The global distribution of security incidents has shifted significantly over time - Some countries that were previously security hotspots have shown improvement - New areas of concern have emerged in recent years - The total number of recorded incidents shows notable year-to-year variation\nYou can use the play button to animate the map through time, or manually select specific years using the slider."
  },
  {
    "objectID": "eda.html#annual-incident-trends",
    "href": "eda.html#annual-incident-trends",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "4 Annual Incident Trends",
    "text": "4 Annual Incident Trends\nTo better understand the overall temporal pattern of security incidents, we can examine the yearly totals across all countries.\n\n\nCode\n# Aggregate incidents by year\nyear_incidents = df.groupby('year').size().reset_index(name='incidents')\nyear_incidents['year'] = year_incidents['year'].astype(str)\n\n# Create interactive bar chart\nfig2 = px.bar(\n    year_incidents,\n    x='year',\n    y='incidents',\n    title='Interactive Security Incidents by Year',\n    labels={'incidents': 'Number of Incidents', 'year': 'Year'},\n    height=400\n)\n\n# Configure layout\nfig2.update_layout(\n    title={\n        'text': 'Interactive Security Incidents by Year',\n        'y': 0.95,\n        'x': 0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'\n    },\n    xaxis=dict(rangeslider=dict(visible=True), type='category'),\n    bargap=0.1,\n    template='plotly_white'\n)\n\n# Save and display figure\nfig2.write_html(\"images/interactive_yearly_incidents_barchart.html\")\nfig2.show()\n\n\n                                                \n\n\nThe interactive bar chart shows: - Years with notable spikes in security incidents - Overall trends in global security over time - Periods of relative stability and instability\nThe rangeslider at the bottom allows you to focus on specific time periods for more detailed analysis. Several factors might explain the patterns observed, including: - Major global events and conflicts - Changes in reporting practices - Implementation of new security measures - Shifts in geopolitical landscapes"
  },
  {
    "objectID": "eda.html#identifying-security-hotspots",
    "href": "eda.html#identifying-security-hotspots",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "5 Identifying Security Hotspots",
    "text": "5 Identifying Security Hotspots\nNot all countries experience security incidents at the same rate. By identifying which nations have faced the highest numbers of incidents, we can focus attention on areas that may require additional security resources and intervention.\n\n5.1 Countries with Most Incidents: All-Time Analysis\nFirst, let’s look at which countries have experienced the most security incidents over the entire period covered by our dataset:\n\n\nCode\n# Get total incidents by country for all time\ntotal_by_country = df.groupby('country').size().reset_index(name='total_incidents')\ntotal_by_country = total_by_country.sort_values('total_incidents', ascending=False)\ntop15_countries = total_by_country.head(15)\n\n# Create bar chart for all-time top countries\nfig_top_all_time = px.bar(\n    top15_countries,\n    x='country',\n    y='total_incidents',\n    title='Top 15 Countries by Security Incidents (All Time)',\n    labels={'total_incidents': 'Number of Incidents', 'country': 'Country'},\n    color='total_incidents',\n    color_continuous_scale='Viridis',\n    height=450\n)\n\n# Configure layout\nfig_top_all_time.update_layout(\n    title={\n        'text': 'Top 15 Countries by Security Incidents (All Time)',\n        'y': 0.95,\n        'x': 0.5,\n        'xanchor': 'center',\n        'yanchor': 'top',\n        'font': {'size': 20}\n    },\n    xaxis={'categoryorder': 'total descending', 'tickangle': 45},\n    coloraxis_showscale=False\n)\n\n# Display the figure\nfig_top_all_time.show()\n\n# Save figure\nfig_top_all_time.write_html(\"images/top_countries_all_time.html\")\n\n\n                                                \n\n\nThis visualization highlights the countries that have historically been most affected by security incidents. Several factors might contribute to a country appearing on this list: - Long-standing regional conflicts - Political instability - Higher population (which can increase the absolute number of incidents) - More comprehensive reporting of incidents\n\n\n5.2 Countries with Most Incidents: Recent Trends\nHistorical patterns don’t always reflect current realities. To identify emerging security hotspots, we need to focus on more recent data. The following analysis examines incident patterns over the past 10 years:\n\n\nCode\n# Get incidents for the last 10 years\ncurrent_year = df['year'].max()\nten_years_ago = current_year - 10\nrecent_df = df[df['year'] &gt;= ten_years_ago]\n\n# Calculate top countries for recent period\nrecent_by_country = recent_df.groupby('country').size().reset_index(name='recent_incidents')\nrecent_by_country = recent_by_country.sort_values('recent_incidents', ascending=False)\ntop15_recent = recent_by_country.head(15)\n\n# Create bar chart for recent top countries\nfig_top_recent = px.bar(\n    top15_recent,\n    x='country',\n    y='recent_incidents',\n    title=f'Top 15 Countries by Security Incidents (Last 10 Years: {ten_years_ago}-{current_year})',\n    labels={'recent_incidents': 'Number of Incidents', 'country': 'Country'},\n    color='recent_incidents',\n    color_continuous_scale='Viridis',\n    height=600\n)\n\n# Configure layout\nfig_top_recent.update_layout(\n    title={\n        'text': f'Top 15 Countries by Security Incidents (Last 10 Years: {ten_years_ago}-{current_year})',\n        'y': 0.95,\n        'x': 0.5,\n        'xanchor': 'center',\n        'yanchor': 'top',\n        'font': {'size': 20}\n    },\n    xaxis={'categoryorder': 'total descending', 'tickangle': 45},\n    coloraxis_showscale=False\n)\n\n# Display the figure\nfig_top_recent.show()\n\n# Save figure\nfig_top_recent.write_html(\"images/top_countries_recent.html\")\n\n\n                                                \n\n\nThis recent trends analysis shows: - Countries that have experienced deteriorating security situations in the past decade - Nations that continue to face persistent security challenges - Emerging hotspots that may not have appeared in historical data\nBy comparing this visualization with the all-time analysis, we can identify significant shifts in global security patterns."
  },
  {
    "objectID": "eda.html#comparing-historical-and-recent-hotspots",
    "href": "eda.html#comparing-historical-and-recent-hotspots",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "6 Comparing Historical and Recent Hotspots",
    "text": "6 Comparing Historical and Recent Hotspots\nTo better understand how security landscapes have changed, let’s directly compare the countries that appear in our all-time and recent top 15 lists:\n\n\nCode\n# Find overlapping countries in both top 15 lists\nall_time_set = set(top15_countries['country'])\nrecent_set = set(top15_recent['country'])\nmatches = all_time_set.intersection(recent_set)\n\n# Print results\nprint(f\"Number of countries appearing in both top 15 lists: {len(matches)}\")\nprint(\"Countries appearing in both lists:\")\nfor country in sorted(matches):\n    print(f\"- {country}\")\n\n# Countries only in all-time list\nall_time_only = all_time_set - recent_set\nif all_time_only:\n    print(\"\\nCountries in all-time top 15 but not in recent top 15:\")\n    for country in sorted(all_time_only):\n        print(f\"- {country}\")\n\n# Countries only in recent list\nrecent_only = recent_set - all_time_set\nif recent_only:\n    print(\"\\nCountries in recent top 15 but not in all-time top 15:\")\n    for country in sorted(recent_only):\n        print(f\"- {country}\")\n\n\nNumber of countries appearing in both top 15 lists: 13\nCountries appearing in both lists:\n- Afghanistan\n- Central African Republic\n- DR Congo\n- Ethiopia\n- Mali\n- Myanmar\n- Nigeria\n- Occupied Palestinian Territories\n- Somalia\n- South Sudan\n- Sudan\n- Syrian Arab Republic\n- Yemen\n\nCountries in all-time top 15 but not in recent top 15:\n- Iraq\n- Pakistan\n\nCountries in recent top 15 but not in all-time top 15:\n- Cameroon\n- Haiti\n\n\nThis comparison reveals three important categories:\n\nPersistent Hotspots: Countries appearing in both lists have faced ongoing security challenges throughout the period covered by our dataset. These nations may require sustained international attention and support.\nImproving Situations: Countries that appear in the all-time list but not in the recent list have likely experienced security improvements. Understanding the factors behind these positive trends could provide valuable insights for improving security elsewhere.\nEmerging Concerns: Countries that appear in the recent list but not in the all-time list represent emerging security challenges. Early intervention in these areas might prevent further deterioration."
  },
  {
    "objectID": "eda.html#conclusion",
    "href": "eda.html#conclusion",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "7 Conclusion",
    "text": "7 Conclusion\nThis analysis has revealed significant patterns in the global distribution of security incidents, both geographically and temporally. Key takeaways include:\n\nSecurity incidents aren’t distributed uniformly across the globe, with clear hotspots in specific regions\nThe global security landscape has evolved considerably over time, with some countries experiencing improvements while others face deteriorating conditions\nBoth historical patterns and recent trends are important when assessing security situations\nThe interactive visualizations presented here allow for exploration of specific regions and time periods of interest\n\nThese insights can help inform security policies, resource allocation, and intervention strategies. By understanding where and when security incidents are most likely to occur, stakeholders can work more effectively to mitigate risks and improve global security.\nFuture work could expand on this analysis by: - Incorporating additional data sources for more comprehensive coverage - Analyzing specific types of security incidents separately - Examining correlations with socioeconomic and political factors - Developing predictive models to forecast emerging security hotspots"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "eda.html#section",
    "href": "eda.html#section",
    "title": "Security Incidents Analysis: Global Patterns and Trends",
    "section": "8 ",
    "text": "8 \ndo an overall analysis on types of injuries and then explain what each one is and when / why its likely to occur"
  },
  {
    "objectID": "palestine.html",
    "href": "palestine.html",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "",
    "text": "This analysis examines security incidents in the Occupied Palestinian Territories, investigating patterns and trends over time. By examining detailed data on security incidents, this report provides insights into the changing nature of security challenges in the region, focusing on frequency, types of attacks, casualties, and organizations affected.\nThe security situation in the Occupied Palestinian Territories has evolved significantly over the past two decades. Understanding these patterns is essential for humanitarian organizations, policymakers, and security professionals operating in the region. This analysis aims to provide a data-driven foundation for decision-making and planning."
  },
  {
    "objectID": "palestine.html#introduction",
    "href": "palestine.html#introduction",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "",
    "text": "This analysis examines security incidents in the Occupied Palestinian Territories, investigating patterns and trends over time. By examining detailed data on security incidents, this report provides insights into the changing nature of security challenges in the region, focusing on frequency, types of attacks, casualties, and organizations affected.\nThe security situation in the Occupied Palestinian Territories has evolved significantly over the past two decades. Understanding these patterns is essential for humanitarian organizations, policymakers, and security professionals operating in the region. This analysis aims to provide a data-driven foundation for decision-making and planning."
  },
  {
    "objectID": "palestine.html#temporal-trends-in-security-incidents",
    "href": "palestine.html#temporal-trends-in-security-incidents",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "3 Temporal Trends in Security Incidents",
    "text": "3 Temporal Trends in Security Incidents\n\n3.1 Overview of Incidents Over Time\nThe frequency of security incidents provides a crucial indicator of the changing security landscape. The following analysis examines how incident rates have evolved over the years.\n\n\nCode\npalestine_data = df[df['country'] == 'Occupied Palestinian Territories']\n\n# Check if we have data\nif len(palestine_data) == 0:\n    print(\"No data found for 'Occupied Palestinian Territories'\")\nelse:\n    # Group incidents by year\n    yearly_incidents = palestine_data.groupby('year').size().reset_index(name='incidents')\n    \n    # Create line chart\n    fig = px.line(\n        yearly_incidents, \n        x='year', \n        y='incidents',\n        markers=True,\n        labels={'incidents': 'Number of Incidents', 'year': 'Year'},\n        height=400\n    )\n    \n    # Configure layout\n    fig.update_layout(\n        xaxis=dict(tickmode='linear', dtick=2),\n        yaxis=dict(zeroline=True),\n        hovermode='x unified',\n        template='plotly_white'\n    )\n    \n    # Add range slider\n    fig.update_xaxes(rangeslider_visible=True)\n    \n    # Add event annotations\n    events = [\n        {'year': 2006, 'event': 'Hamas takes control of Gaza', 'y_position': 5},\n        {'year': 2014, 'event': 'Israel-Hamas conflict', 'y_position': 10},\n        {'year': 2018, 'event': 'Gaza border protests', 'y_position': 8},\n        {'year': 2021, 'event': '11-day conflict', 'y_position': 7},\n        {'year': 2023, 'event': 'Oct 7 Hamas attack', 'y_position': 15},\n        {'year': 2024, 'event': 'Gaza war escalation', 'y_position': 65}\n    ]\n    \n    for event in events:\n        fig.add_annotation(\n            x=event['year'],\n            y=event['y_position'],\n            text=event['event'],\n            showarrow=True,\n            arrowhead=1,\n            ax=0,\n            ay=-20,  # Less vertical offset (was -30)\n            font=dict(size=9),  # Smaller font size\n            bgcolor=\"rgba(255,255,255,0.85)\",\n            bordercolor=\"black\",\n            borderwidth=1,\n            borderpad=3\n        )\n    \n    # Save and display the figure\n    fig.write_html(\"images/opt_incidents_overtime.html\")\n    fig.show()\n\n\n                                                \n\n\n\n\nCode\npalestine_data = df[df['country'] == 'Occupied Palestinian Territories']\n\n# Check if we have data\nif len(palestine_data) == 0:\n    print(\"No data found for 'Occupied Palestinian Territories'\")\nelse:\n    # Group by year and sum total_affected\n    yearly_affected = (\n        palestine_data.groupby('year')['total_affected']\n        .sum()\n        .reset_index()\n        .rename(columns={'total_affected': 'affected'})\n    )\n    \n    # Create line chart\n    fig = px.line(\n        yearly_affected, \n        x='year', \n        y='affected',\n        markers=True,\n        labels={'affected': 'Total Affected Individuals', 'year': 'Year'},\n        height=400\n    )\n    \n    # Configure layout\n    fig.update_layout(\n        xaxis=dict(tickmode='linear', dtick=2),\n        yaxis=dict(zeroline=True),\n        hovermode='x unified',\n        template='plotly_white'\n    )\n    \n    # Add range slider\n    fig.update_xaxes(rangeslider_visible=True)\n    \n    # Save and display the figure\n    fig.write_html(\"images/opt_affected_overtime.html\")\n    fig.show()\n\n\n                                                \n\n\nThe line chart above reveals a striking pattern in security incidents in the Occupied Palestinian Territories. For nearly two decades, from 2002 to 2022, incident levels remained relatively stable, typically below 10 incidents per year with occasional modest spikes around 2010, 2014, and 2020, corresponding to periods of heightened tension and conflict.\nHowever, a dramatic shift occurred in 2024, when incidents surged to an unprecedented 68 incidents - representing approximately 43% of all recorded incidents (158 total) in the entire dataset. This extraordinary increase directly reflects the intense escalation following the October 7, 2023 Hamas attack and the subsequent Israeli military campaign in Gaza, which developed into a sustained conflict with severe humanitarian consequences.\nThe pattern indicates that while periodic cycles of violence have occurred historically, the 2023-2024 escalation represents a significant departure from previous patterns in both scale and intensity. This finding highlights the unprecedented nature of the current conflict, which has resulted in massive civilian casualties, widespread displacement, and severe humanitarian crisis across Gaza. The data underscores how regional geopolitical developments, the collapse of ceasefire negotiations, and the expansion of the conflict beyond Gaza have fundamentally altered security dynamics throughout the Palestinian territories."
  },
  {
    "objectID": "palestine.html#nature-of-security-incidents",
    "href": "palestine.html#nature-of-security-incidents",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "4 Nature of Security Incidents",
    "text": "4 Nature of Security Incidents\n\n4.1 Types of Attacks\nUnderstanding the methods used in security incidents provides insights into the tactics employed by various actors and helps security professionals develop appropriate countermeasures.\n\n\nCode\n# Analyzing means of attack\nattack_counts = palestine_data['means_of_attack'].value_counts().reset_index()\nattack_counts.columns = ['Attack Type', 'Count']\nattack_counts = attack_counts.sort_values('Count', ascending=False).head(10)\n\n# Create horizontal bar chart for better readability\nfig_attacks = px.bar(\n    attack_counts,\n    y='Attack Type',\n    x='Count',\n    title='Most Common Types of Attacks in Occupied Palestinian Territories',\n    color='Count',\n    height=400,\n    orientation='h'\n)\n\n# Configure layout\nfig_attacks.update_layout(\n    yaxis={'categoryorder': 'total ascending'},\n    xaxis_title=\"Number of Incidents\",\n    yaxis_title=\"Attack Type\"\n)\n\nfig_attacks.show()\n\n\n                                                \n\n\nThe horizontal bar chart above shows that aerial bombardment is by far the most common type of attack in the Occupied Palestinian Territories, followed by shooting incidents. This distribution offers important insights into the nature of security threats in the region:\n\nAerial bombardment: The predominance of this attack type suggests a significant role of military forces with air capabilities in the conflict.\nShooting incidents: These represent the second most frequent attack type, indicating that armed confrontations with firearms are also a substantial threat.\nVariety of methods: The data shows a diverse range of attack methods beyond the top two, including shelling, bodily assault, and various forms of explosives and kidnapping.\n\nThis information is crucial for security planning, as different types of attacks require different prevention strategies and response protocols. The high proportion of aerial attacks, in particular, highlights the asymmetrical nature of the conflict and the challenges this poses for civilian protection."
  },
  {
    "objectID": "palestine.html#human-impact-of-security-incidents",
    "href": "palestine.html#human-impact-of-security-incidents",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "5 Human Impact of Security Incidents",
    "text": "5 Human Impact of Security Incidents\n\n5.1 Casualties by Category\nThe human cost of security incidents can be measured in terms of casualties. The following analysis examines how these impacts differ between nationals (local Palestinians) and international personnel.\n\n\nCode\n#| label: casualties-analysis\n\n# Create data for stacked bar chart\nstacked_data = {\n    'Category': ['Nationals', 'Internationals'],\n    'Killed': [\n        palestine_data['nationals_killed'].sum(),\n        palestine_data['internationals_killed'].sum()\n    ],\n    'Wounded': [\n        palestine_data['nationals_wounded'].sum(),\n        palestine_data['internationals_wounded'].sum()\n    ],\n    'Kidnapped': [\n        palestine_data['nationals_kidnapped'].sum(),\n        palestine_data['internationals_kidnapped'].sum()\n    ]\n}\n\n# Convert to DataFrame and reshape for stacking\nstacked_df = pd.DataFrame(stacked_data)\nstacked_df_long = pd.melt(\n    stacked_df,\n    id_vars=['Category'],\n    value_vars=['Killed', 'Wounded', 'Kidnapped'],\n    var_name='Status',\n    value_name='Count'\n)\n\n# Create a stacked bar chart\nfig_stacked = px.bar(\n    stacked_df_long,\n    x='Category',\n    y='Count',\n    color='Status',\n    title='Total Casualties in Occupied Palestinian Territories by Category',\n    barmode='stack',\n    height=450,\n    color_discrete_map={'Killed': '#FF5252', 'Wounded': '#FFBD59', 'Kidnapped': '#64C1FF'}\n)\n\n# Improve layout\nfig_stacked.update_layout(\n    xaxis_title=\"\",\n    yaxis_title=\"Number of People\",\n    legend_title_text=\"\"\n)\n\nfig_stacked.show()\n\n\n                                                \n\n\nnote just kidnapped is so neglible you cant even see it. internationals has 1 instance and nationals has 0.\nThe stacked bar chart above reveals a stark disparity in the impact of security incidents on different population groups. Nationals (local Palestinians) have suffered significantly higher casualties compared to international personnel, in terms of both fatalities and injuries.\nThis pattern is not unusual in conflict zones, where local populations typically bear the brunt of violence. However, the scale of the difference is notable and has important implications:\n\nProtection needs: The disproportionate impact on locals highlights the critical need for civilian protection measures.\nHumanitarian considerations: The high casualty rates among nationals underscore the humanitarian dimension of the conflict.\nRisk differentials: The relatively lower casualties among internationals may reflect differences in exposure, protection measures, or targeting patterns.\n\nThese findings emphasize the importance of humanitarian programs that address the needs of local populations, who face the highest security risks in the region.\n\n\n5.2 Gender Distribution of Affected Individuals\nUnderstanding how security incidents affect different gender groups provides additional insights into vulnerability patterns.\n\n\nCode\n# Check if we have gender data\ngender_cols = ['gender_male', 'gender_female']\nif all(col in palestine_data.columns for col in gender_cols):\n    # Sum up total counts by gender\n    gender_totals = {\n        'Gender': ['Male', 'Female'],\n        'Count': [\n            palestine_data['gender_male'].sum(),\n            palestine_data['gender_female'].sum()\n        ]\n    }\n    \n    # Convert to DataFrame\n    gender_df = pd.DataFrame(gender_totals)\n    \n    # Create simple bar chart with same color\n    fig_gender = px.bar(\n        gender_df,\n        x='Gender',\n        y='Count',\n        title='Gender Distribution of Affected Individuals',\n        color_discrete_sequence=['#4C78A8'] * len(gender_df)  # Same blue color for all bars\n    )\n    \n    # Improve layout\n    fig_gender.update_layout(\n        xaxis_title=\"\",\n        yaxis_title=\"Number of Individuals\"\n    )\n    \n    fig_gender.show()\n\n\n                                                \n\n\nThe chart above shows the gender distribution of individuals affected by security incidents, focusing only on confirmed male and female casualties (excluding those of unknown gender). This analysis reveals notable gender disparities in the impact of security incidents.\nMales appear to be more frequently affected than females, which aligns with patterns observed in many conflict zones. This gender disparity can be influenced by several factors:\n\nGender roles: In some contexts, males may have higher exposure to security risks due to mobility patterns or engagement in certain activities.\nTargeting patterns: Some types of security incidents may affect certain gender groups disproportionately.\nReporting biases: It’s important to acknowledge that data collection in conflict zones can sometimes undercount impacts on certain groups.\n\nUnderstanding these gender dimensions is crucial for developing gender-sensitive security protocols and humanitarian responses that address the specific protection needs of different groups."
  },
  {
    "objectID": "palestine.html#actors-and-targets-in-security-incidents",
    "href": "palestine.html#actors-and-targets-in-security-incidents",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "6 Actors and Targets in Security Incidents",
    "text": "6 Actors and Targets in Security Incidents\n\n6.1 Comparison of Actor Types\nIdentifying the actors responsible for security incidents helps in understanding the conflict dynamics and potential motivations.\n\n\nCode\n# Analyze actor types, focusing only on Host State vs Foreign\nif 'actor_type' in palestine_data.columns and not palestine_data['actor_type'].isna().all():\n    # Filter only for Host State and Foreign actors\n    relevant_actors = ['Host state', 'Foreign or coalition forces']\n    actor_data = palestine_data[palestine_data['actor_type'].isin(relevant_actors)]\n    \n    # Check if we have data for these specific actors\n    if len(actor_data) &gt; 0:\n        actor_counts = actor_data['actor_type'].value_counts().reset_index()\n        actor_counts.columns = ['Actor Type', 'Count']\n        \n        # Create a column chart with same color\n        fig_actors = px.bar(\n            actor_counts,\n            x='Actor Type',\n            y='Count',\n            title='Host State vs Foreign Actors in Security Incidents',\n            color_discrete_sequence=['#4C78A8'] * len(actor_counts)\n        )\n        \n        # Improve layout\n        fig_actors.update_layout(\n            xaxis_title=\"\",\n            yaxis_title=\"Number of Incidents\"\n        )\n        \n        fig_actors.show()\n    else:\n        print(\"No data found for Host State or Foreign actors\")\n\n\n                                                \n\n\nThis analysis focuses specifically on two major actor types responsible for security incidents: Host State forces and Foreign/coalition forces. Other actor categories were excluded due to their smaller numbers and to enable a clear comparison between these two primary groups.\nThe chart reveals a notable difference in the frequency of incidents attributed to each actor type. This comparison provides important context for understanding the sources of security threats in the region:\n\nResponsibility patterns: The data shows which forces are associated with more security incidents, helping to identify key actors in the conflict.\nConflict dynamics: The relative role of host state versus foreign forces offers insights into the nature of the conflict and external involvement.\nAccountability implications: Understanding which actors are responsible for incidents has implications for accountability and human rights monitoring.\n\nStatistical testing helps determine whether the observed difference between actor types is significant or could have occurred by chance, providing additional rigor to the analysis.\n\n\n6.2 Organizations Affected by Security Incidents\nDifferent types of organizations operating in the Occupied Palestinian Territories face varying levels of security risk. This analysis examines which organizations are most frequently affected by incidents.\n\n\nCode\n# Count incidents affecting different organization types\norg_cols = ['un', 'ingo', 'icrc', 'nrcs_and_ifrc', 'nngo', 'other']\n\n# Create a summary of total incidents by organization type\norg_totals = palestine_data[org_cols].sum().reset_index()\norg_totals.columns = ['Organization Type', 'Total Incidents']\n\n# Sort by total incidents for better visualization\norg_totals = org_totals.sort_values('Total Incidents', ascending=False)\n\n# Create better labels for organization types\norg_labels = {\n    'un': 'United Nations',\n    'ingo': 'International NGO',\n    'icrc': 'Int. Committee of Red Cross',\n    'nrcs_and_ifrc': 'National Red Cross/Red Crescent',\n    'nngo': 'National NGO',\n    'other': 'Other Organizations'\n}\n\n# Map the short names to full names\norg_totals['Organization'] = org_totals['Organization Type'].map(org_labels)\n\n# Create a horizontal bar chart with uniform color\nfig_orgs = px.bar(\n    org_totals,\n    y='Organization',\n    x='Total Incidents',\n    title='Security Incidents by Organization Type in Occupied Palestinian Territories',\n    height=450,\n    orientation='h',\n    color_discrete_sequence=['#4C78A8'] * len(org_totals)\n)\n\n# Improve layout\nfig_orgs.update_layout(\n    yaxis_title=\"\",\n    xaxis_title=\"Number of Incidents\",\n    yaxis={'categoryorder': 'total ascending'}\n)\n\nfig_orgs.show()\n\n\n                                                \n\n\nThe chart above shows how security incidents have affected different types of organizations operating in the Occupied Palestinian Territories. This distribution reveals several important patterns:\n\nOrganizational vulnerability: Some organizations appear to be more frequently affected by security incidents than others, which may reflect differences in their operational footprint, visibility, or targeting patterns.\nInternational vs. local exposure: The data allows comparison between international organizations (UN, INGOs, ICRC) and local entities, highlighting any disparities in security risks.\nHumanitarian access challenges: Organizations providing humanitarian assistance face varying levels of security threats, which has implications for service delivery to vulnerable populations.\n\nThese findings can help organizations develop security strategies tailored to their specific risk profiles and improve coordination between different actors operating in the region."
  },
  {
    "objectID": "palestine.html#conclusion",
    "href": "palestine.html#conclusion",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "8 Conclusion",
    "text": "8 Conclusion\nThis analysis of security incidents in the Occupied Palestinian Territories reveals several critical patterns and trends:\n\nDramatic recent escalation: After nearly two decades of relatively stable incident levels, 2024 saw an unprecedented surge in security incidents, accounting for 43% of all recorded incidents in the dataset.\nPredominant attack methods: Aerial bombardment and shooting incidents emerge as the most common types of attacks, highlighting the nature of military operations in the region.\nDisproportionate impact on locals: Palestinian nationals have suffered significantly higher casualties compared to international personnel, underscoring the humanitarian dimension of the conflict.\nGender disparities: Males appear to be more frequently affected by security incidents than females, though this pattern requires careful interpretation.\nActor dynamics: The analysis reveals differences in the frequency of incidents attributed to host state versus foreign forces, providing context on responsibility patterns.\nOrganizational vulnerability: Various organizations operating in the region face different levels of security risk, which has implications for humanitarian access and service delivery.\n\nThese findings have important implications for security planning, humanitarian programming, and policy development. They highlight the need for:\n\nEnhanced civilian protection measures, particularly for local populations\nTargeted security protocols based on the most common types of attacks\nGender-sensitive approaches to security and humanitarian assistance\nImproved coordination among organizations operating in the region\nContinued monitoring of security trends, especially given the recent escalation\n\nBy providing a data-driven understanding of security patterns in the Occupied Palestinian Territories, this analysis aims to contribute to safer and more effective operations in this challenging environment."
  },
  {
    "objectID": "palestine.html#attack-context",
    "href": "palestine.html#attack-context",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "7 attack context",
    "text": "7 attack context\n\n\nCode\n# Analyze attack contexts\nif 'attack_context' in palestine_data.columns:\n    # Get counts of incidents by attack context\n    context_counts = palestine_data['attack_context'].value_counts().reset_index()\n    context_counts.columns = ['Attack Context', 'Count']\n    \n    # Sort by count for better visualization\n    context_counts = context_counts.sort_values('Count', ascending=False)\n    \n    # Create a column chart\n    fig_context = px.bar(\n        context_counts,\n        x='Attack Context',\n        y='Count',\n        title='Security Incidents by Attack Context in Occupied Palestinian Territories',\n        color_discrete_sequence=['#4C78A8'] * len(context_counts)  # Same blue color for all bars\n    )\n    \n    # Improve layout\n    fig_context.update_layout(\n        xaxis_title=\"\",\n        yaxis_title=\"Number of Incidents\",\n        xaxis={'categoryorder': 'total descending', 'tickangle': 45}  # Angled labels for better readability\n    )\n    \n    fig_context.show()\nelse:\n    print(\"Attack context data not available\")\n\n\n                                                \n\n\n“Combat/Crossfire” is overwhelmingly the most common context for security incidents, accounting for over 100 incidents - far more than all other contexts combined. This suggests that most security incidents occur during active combat situations where individuals are caught between opposing forces. The second and third most common contexts are “Individual attack” and “Unknown,” each accounting for approximately 15-20 incidents. “Individual attack” likely refers to targeted incidents against specific people or small groups, as opposed to broader combat situations. Less frequent contexts include “Ambush” (about 7 incidents), “Raid” (approximately 3 incidents), and “Detention” (just 1 incident). This distribution has important implications for security planning in the region:\nThe predominance of combat/crossfire incidents suggests that being caught in active conflict zones represents the greatest security risk. The significant gap between combat-related incidents and other types indicates that conflict avoidance should be a primary security strategy. Individual attacks, while less common than combat incidents, still represent a notable security threat that requires different mitigation approaches than those for combat situations."
  },
  {
    "objectID": "palestine.html#what-is-happening-in-palestine",
    "href": "palestine.html#what-is-happening-in-palestine",
    "title": "Security Incidents in Palestine: Trends Over Time",
    "section": "2 What is happening in Palestine?",
    "text": "2 What is happening in Palestine?\n\nPalestine has experienced a complex and turbulent history of conflict that has significantly intensified in recent times. The current crisis stems from decades of territorial disputes and failed peace efforts.\nThe foundation of the modern conflict began with Israel’s creation in 1948, which displaced hundreds of thousands of Palestinians. The situation dramatically changed after the 1967 Six-Day War when Israel gained control of the Gaza Strip, West Bank, and East Jerusalem.\nDespite peace efforts through the Oslo Accords in the 1990s that established limited Palestinian self-governance, tensions have remained high, erupting periodically in Palestinian uprisings known as intifadas.\nA critical turning point occurred in 2006 when Hamas won Palestinian elections and took control of Gaza, leading to a political split between Gaza and the West Bank. This has resulted in periodic outbreaks of violence, including major confrontations in 2014 and 2021.\nThe situation dramatically escalated on October 7, 2023, when Hamas launched a surprise attack on Israel, killing over 1,300 Israelis and taking hundreds hostage. Israel responded with a full-scale war, launching air campaigns and ground operations in Gaza.\nThe humanitarian consequences have been devastating. By early 2025, about 90% of Gaza’s population has been displaced, over 46,000 Gazans have died, and essential infrastructure including all hospitals has been destroyed. The region faces a severe humanitarian crisis with widespread food insecurity and limited access to aid.\nAfter fifteen months of fighting, a ceasefire was brokered in January 2025, but its implementation remains uncertain amid political tensions within Israel’s government."
  }
]